{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport dtypes from '@stdlib/array-dtypes';\nimport dtype from '@stdlib/array-dtype';\nimport contains from '@stdlib/array-base-assert-contains';\nimport join from '@stdlib/array-base-join';\nimport { ndarray as strided } from '@stdlib/stats-base-varianceyc';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar IDTYPES = dtypes( 'real_and_generic' );\nvar GENERIC_DTYPE = 'generic';\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of an array using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657â€“65. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {NumericArray} x - input array\n* @param {number} [correction=1.0] - degrees of freedom adjustment\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} second argument must be a number\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = varianceyc( x, 1.0 );\n* // returns ~4.3333\n*/\nfunction varianceyc( x ) {\n\tvar correction;\n\tvar dt;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'null2O', x ) );\n\t}\n\tdt = dtype( x ) || GENERIC_DTYPE;\n\tif ( !contains( IDTYPES, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( IDTYPES, '\", \"' ), dt ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tcorrection = arguments[ 1 ];\n\t\tif ( !isNumber( correction ) ) {\n\t\t\tthrow new TypeError( format( 'null4A', correction ) );\n\t\t}\n\t} else {\n\t\tcorrection = 1.0;\n\t}\n\treturn strided( x.length, correction, x, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default varianceyc;\n"],"names":["IDTYPES","dtypes","varianceyc","x","correction","dt","isCollection","TypeError","format","dtype","contains","join","arguments","length","isNumber","strided"],"mappings":";;iwBAkCA,IAAIA,EAAUC,EAAQ,oBA8BtB,SAASC,EAAYC,GACpB,IAAIC,EACAC,EACJ,IAAMC,EAAcH,GACnB,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAGxC,GADAE,EAAKI,EAAON,IAnCO,WAoCbO,EAAUV,EAASK,GACxB,MAAM,IAAIE,UAAWC,EAAQ,qGAAsGG,EAAMX,EAAS,QAAUK,IAE7J,GAAKO,UAAUC,OAAS,GAEvB,IAAMC,EADNV,EAAaQ,UAAW,IAEvB,MAAM,IAAIL,UAAWC,EAAQ,SAAUJ,SAGxCA,EAAa,EAEd,OAAOW,EAASZ,EAAEU,OAAQT,EAAYD,EAAG,EAAG,EAC7C"}